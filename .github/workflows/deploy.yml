name: Build and Deploy to ACR (force-sync compose + rolling health)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  ACR_NAME: group4acr
  ACR_LOGIN_SERVER: group4acr.azurecr.io
  RG: RG-group4
  VMSS_BE: vmss-backend-group4
  VMSS_FE: vmss-frontend-group4
  APP_DIR: /home/azureuser/ecommerce-app-three-tier-azure-db-ih
  BE_HEALTH_URL: http://127.0.0.1:3001/health
  FE_HEALTH_URL: http://127.0.0.1:3000/health

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR Login
        run: az acr login --name "$ACR_NAME" --only-show-errors

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ===== Build & Push (صور latest + commit) =====
      - name: Build and Push Backend
        run: |
          set -euo pipefail
          TAG=${{ github.sha }}
          docker build \
            -t $ACR_LOGIN_SERVER/ecommerce-backend:${TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-backend:latest \
            ./ecommerce-app-backend
          docker push $ACR_LOGIN_SERVER/ecommerce-backend:${TAG}
          docker push $ACR_LOGIN_SERVER/ecommerce-backend:latest

      - name: Build and Push Frontend
        run: |
          set -euo pipefail
          TAG=${{ github.sha }}
          docker build \
            --build-arg COMMIT_SHA=${TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-frontend:${TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-frontend:latest \
            ./ecommerce-app-frontend
          docker push $ACR_LOGIN_SERVER/ecommerce-frontend:${TAG}
          docker push $ACR_LOGIN_SERVER/ecommerce-frontend:latest

      # ===== دالة مساعدة تكتب compose موحّد + تحدث خدمة واحدة وتنتظر صحتها =====
      - name: Update VMSS Backend (instance-by-instance with health)
        shell: bash
        run: |
          set -euo pipefail

          mapfile -t VM_NAMES < <(az vmss list-instances -g "$RG" -n "$VMSS_BE" --query "[].name" -o tsv)
          if [ ${#VM_NAMES[@]} -eq 0 ]; then
            echo "No instances in $VMSS_BE — skip."
            exit 0
          fi

          for VMNAME in "${VM_NAMES[@]}"; do
            echo ">>> Updating BACKEND on ${VMNAME} ..."
            az vm run-command invoke \
              -g "$RG" -n "$VMNAME" \
              --command-id RunShellScript \
              --scripts "
set -e
cd \"$APP_DIR\"

# 1) اكتب نسخة ذهبية من docker-compose.yml (بدون build: ، فقط image:)
cat > docker-compose.yml <<COMPOSE
version: \"3.9\"
services:
  backend:
    image: $ACR_LOGIN_SERVER/ecommerce-backend:latest
    container_name: ecommerce-backend
    ports:
      - \"3001:3001\"
    env_file:
      - ./ecommerce-app-backend/.env
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_ENCRYPT=true
      - DB_TRUST_SERVER_CERTIFICATE=false
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=http://4.245.59.253
    restart: unless-stopped
    healthcheck:
      test: [\"CMD-SHELL\", \"curl -fsS http://localhost:3001/health || exit 1\"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    image: $ACR_LOGIN_SERVER/ecommerce-frontend:latest
    container_name: ecommerce-frontend
    ports:
      - \"3000:80\"
    restart: unless-stopped
    healthcheck:
      test: [\"CMD-SHELL\", \"curl -fsS http://localhost/health || exit 1\"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
COMPOSE

# 2) Login ACR باستخدام الهوية المُدارة
az login --identity
TOKEN=\$(az acr login --name $ACR_NAME --expose-token --query accessToken -o tsv)
echo \$TOKEN | docker login $ACR_LOGIN_SERVER -u 00000000-0000-0000-0000-000000000000 --password-stdin

# 3) اسحب وشغّل backend فقط (ملف compose موحّد للخدمتين)
docker compose pull backend
docker compose up -d --no-deps --pull always --force-recreate backend

# 4) انتظر الصحة
TRY=0; MAX=36
until curl -fsS \"$BE_HEALTH_URL\" >/dev/null; do
  TRY=\$((TRY+1))
  if [ \$TRY -ge \$MAX ]; then
    echo 'Backend failed healthcheck'
    docker ps --filter name=ecommerce-backend
    docker logs \$(docker ps --filter name=ecommerce-backend -q) --tail 200 || true
    exit 1
  fi
  sleep 5
done
echo 'Backend healthy ✓'
" > /dev/null
          done

      - name: Update VMSS Frontend (instance-by-instance with health)
        shell: bash
        run: |
          set -euo pipefail

          mapfile -t VM_NAMES < <(az vmss list-instances -g "$RG" -n "$VMSS_FE" --query "[].name" -o tsv)
          if [ ${#VM_NAMES[@]} -eq 0 ]; then
            echo "No instances in $VMSS_FE — skip."
            exit 0
          fi

          for VMNAME in "${VM_NAMES[@]}"; do
            echo ">>> Updating FRONTEND on ${VMNAME} ..."
            az vm run-command invoke \
              -g "$RG" -n "$VMNAME" \
              --command-id RunShellScript \
              --scripts "
set -e
cd \"$APP_DIR\"

# 1) نفس نسخة compose الذهبية لضمان التوحيد
cat > docker-compose.yml <<COMPOSE
version: \"3.9\"
services:
  backend:
    image: $ACR_LOGIN_SERVER/ecommerce-backend:latest
    container_name: ecommerce-backend
    ports:
      - \"3001:3001\"
    env_file:
      - ./ecommerce-app-backend/.env
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_ENCRYPT=true
      - DB_TRUST_SERVER_CERTIFICATE=false
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=http://4.245.59.253
    restart: unless-stopped
    healthcheck:
      test: [\"CMD-SHELL\", \"curl -fsS http://localhost:3001/health || exit 1\"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    image: $ACR_LOGIN_SERVER/ecommerce-frontend:latest
    container_name: ecommerce-frontend
    ports:
      - \"3000:80\"
    restart: unless-stopped
    healthcheck:
      test: [\"CMD-SHELL\", \"curl -fsS http://localhost/health || exit 1\"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
COMPOSE

# 2) ACR login
az login --identity
TOKEN=\$(az acr login --name $ACR_NAME --expose-token --query accessToken -o tsv)
echo \$TOKEN | docker login $ACR_LOGIN_SERVER -u 00000000-0000-0000-0000-000000000000 --password-stdin

# 3) اسحب وشغّل frontend
docker compose pull frontend
docker compose up -d --no-deps --pull always --force-recreate frontend

# 4) انتظر الصحة + اطبع النسخة لو موجودة
TRY=0; MAX=36
until curl -fsS \"$FE_HEALTH_URL\" >/dev/null; do
  TRY=\$((TRY+1))
  if [ \$TRY -ge \$MAX ]; then
    echo 'Frontend failed healthcheck'
    docker ps --filter name=ecommerce-frontend
    docker logs \$(docker ps --filter name=ecommerce-frontend -q) --tail 200 || true
    exit 1
  fi
  sleep 5
done
(curl -fsS http://127.0.0.1:3000/version.txt || true)
echo 'Frontend healthy ✓'
" > /dev/null
          done
