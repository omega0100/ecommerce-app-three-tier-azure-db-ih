name: Build and Deploy to ACR

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  # ======= عدّل الأسماء هنا إذا لزم =======
  ACR_NAME: group4acr
  ACR_LOGIN_SERVER: group4acr.azurecr.io
  RG: RG-group4
  VMSS_BE: vmss-backend-group4
  VMSS_FE: vmss-frontend-group4
  APP_DIR: /home/azureuser/ecommerce-app-three-tier-azure-db-ih
  # =======================================

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      # 1) اسحب الكود
      - uses: actions/checkout@v4

      # 2) تسجيل الدخول لأزور (بسكرت AZURE_CREDENTIALS)
      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 3) تسجيل الدخول إلى ACR من الرنّار
      - name: ACR Login
        run: az acr login --name "$ACR_NAME" --only-show-errors

      # 4) Buildx (أفضل للـ Docker build)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5) ابني وادفع صورة الـ Backend (tag = sha + latest)
      - name: Build and Push Backend
        run: |
          set -euo pipefail
          BACKEND_TAG=${{ github.sha }}
          docker build \
            -t $ACR_LOGIN_SERVER/ecommerce-backend:${BACKEND_TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-backend:latest \
            ./ecommerce-app-backend
          docker push $ACR_LOGIN_SERVER/ecommerce-backend:${BACKEND_TAG}
          docker push $ACR_LOGIN_SERVER/ecommerce-backend:latest
          docker image inspect $ACR_LOGIN_SERVER/ecommerce-backend:${BACKEND_TAG} --format='built backend: {{.Id}}'

      # 6) ابني وادفع صورة الـ Frontend (tag = sha + latest) + تمرير الـ COMMIT_SHA (لو تستعمله داخل الـ Dockerfile)
      - name: Build and Push Frontend
        run: |
          set -euo pipefail
          FRONTEND_TAG=${{ github.sha }}
          docker build \
            --build-arg COMMIT_SHA=${FRONTEND_TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-frontend:${FRONTEND_TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-frontend:latest \
            ./ecommerce-app-frontend
          docker push $ACR_LOGIN_SERVER/ecommerce-frontend:${FRONTEND_TAG}
          docker push $ACR_LOGIN_SERVER/ecommerce-frontend:latest
          docker image inspect $ACR_LOGIN_SERVER/ecommerce-frontend:${FRONTEND_TAG} --format='built frontend: {{.Id}}'

      # 7) حدّث كل VM في الـ VMSS (Backend) — متوافق مع Flexible: نمر على الـ VM IDs ونستخدم az vm run-command
      - name: Update VMSS Backend (loop all instances by VM id)
        shell: bash
        run: |
          set -euo pipefail
          VM_IDS=$(az vmss list-instances -g "$RG" -n "$VMSS_BE" --query "[].id" -o tsv)
          if [ -z "${VM_IDS}" ]; then
            echo "No instances found in $VMSS_BE — skipping."
            exit 0
          fi
          for VMID in $VM_IDS; do
            echo "Updating backend on $VMID ..."
            az vm run-command invoke \
              --ids "$VMID" \
              --command-id RunShellScript \
              --scripts '
                set -e
                cd '"$APP_DIR"'
                # Login to ACR via MSI
                az login --identity
                TOKEN=$(az acr login --name '"$ACR_NAME"' --expose-token --query accessToken -o tsv)
                echo $TOKEN | docker login '"$ACR_LOGIN_SERVER"' -u 00000000-0000-0000-0000-000000000000 --password-stdin

                # Pull & Recreate
                docker compose pull backend
                docker compose up -d --no-deps --pull always --force-recreate backend

                # Quick diagnostics
                docker ps --filter name=ecommerce-backend --format "container={{.ID}} image={{.Image}}"
                docker image prune -f
              ' > /dev/null
          done

      # 8) حدّث كل VM في الـ VMSS (Frontend) — نفس الأسلوب
      - name: Update VMSS Frontend (loop all instances by VM id)
        shell: bash
        run: |
          set -euo pipefail
          VM_IDS=$(az vmss list-instances -g "$RG" -n "$VMSS_FE" --query "[].id" -o tsv)
          if [ -z "${VM_IDS}" ]; then
            echo "No instances found in $VMSS_FE — skipping."
            exit 0
          fi
          for VMID in $VM_IDS; do
            echo "Updating frontend on $VMID ..."
            az vm run-command invoke \
              --ids "$VMID" \
              --command-id RunShellScript \
              --scripts '
                set -e
                cd '"$APP_DIR"'
                # Login to ACR via MSI
                az login --identity
                TOKEN=$(az acr login --name '"$ACR_NAME"' --expose-token --query accessToken -o tsv)
                echo $TOKEN | docker login '"$ACR_LOGIN_SERVER"' -u 00000000-0000-0000-0000-000000000000 --password-stdin

                # Pull & Recreate
                docker compose pull frontend
                docker compose up -d --no-deps --pull always --force-recreate frontend

                # Optional: اطبع نسخة الواجهة لو عندك /version.txt داخل الصورة
                (curl -sS http://localhost:3000/version.txt || true)

                # Quick diagnostics
                docker ps --filter name=ecommerce-frontend --format "container={{.ID}} image={{.Image}}"
                docker image prune -f
              ' > /dev/null
          done
