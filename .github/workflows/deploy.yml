name: Build & Deploy (ACR + VMSS rolling/health)

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  ACR_NAME: group4acr
  ACR_LOGIN_SERVER: group4acr.azurecr.io
  RG: RG-group4
  VMSS_BE: vmss-backend-group4
  VMSS_FE: vmss-frontend-group4
  APP_DIR: /home/azureuser/ecommerce-app-three-tier-azure-db-ih
  BE_HEALTH_URL: http://127.0.0.1:3001/health
  FE_HEALTH_URL: http://127.0.0.1:3000/health

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR Login
        run: az acr login --name "$ACR_NAME" --only-show-errors

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Backend
        shell: bash
        run: |
          set -euo pipefail
          TAG=${{ github.sha }}
          docker build \
            -t $ACR_LOGIN_SERVER/ecommerce-backend:${TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-backend:latest \
            ./ecommerce-app-backend
          docker push $ACR_LOGIN_SERVER/ecommerce-backend:${TAG}
          docker push $ACR_LOGIN_SERVER/ecommerce-backend:latest

      - name: Build and Push Frontend
        shell: bash
        run: |
          set -euo pipefail
          TAG=${{ github.sha }}
          docker build \
            --build-arg COMMIT_SHA=${TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-frontend:${TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-frontend:latest \
            ./ecommerce-app-frontend
          docker push $ACR_LOGIN_SERVER/ecommerce-frontend:${TAG}
          docker push $ACR_LOGIN_SERVER/ecommerce-frontend:latest

      # ===== BACKEND: instance-by-instance + health =====
      - name: Update VMSS Backend (instance-by-instance with health)
        shell: bash
        run: |
          set -euo pipefail

          mapfile -t VM_NAMES < <(az vmss list-instances -g "$RG" -n "$VMSS_BE" --query "[].name" -o tsv)
          [ ${#VM_NAMES[@]} -gt 0 ] || { echo "No instances in $VMSS_BE"; exit 0; }

          for VMNAME in "${VM_NAMES[@]}"; do
            echo ">>> Updating BACKEND on ${VMNAME} ..."
            az vm run-command invoke -g "$RG" -n "$VMNAME" --command-id RunShellScript --scripts "
              set -euo pipefail
              APP_DIR=\"$APP_DIR\"
              ACR_NAME=\"$ACR_NAME\"
              ACR_LOGIN_SERVER=\"$ACR_LOGIN_SERVER\"
              BE_HEALTH_URL=\"$BE_HEALTH_URL\"

              # Ensure docker compose availability
              if ! docker compose version >/dev/null 2>&1; then
                if ! command -v docker-compose >/dev/null 2>&1; then
                  sudo curl -fsSL \"https://github.com/docker/compose/releases/download/2.29.7/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
                  sudo chmod +x /usr/local/bin/docker-compose || true
                fi
              fi

              mkdir -p \"\$APP_DIR\" && cd \"\$APP_DIR\"

              # Golden docker-compose.yml (variables expand here)
              cat > docker-compose.yml <<COMPOSE
              version: \"3.9\"
              services:
                backend:
                  image: ${ACR_LOGIN_SERVER}/ecommerce-backend:latest
                  container_name: ecommerce-backend
                  ports:
                    - \"3001:3001\"
                  env_file:
                    - ./ecommerce-app-backend/.env
                  environment:
                    - NODE_ENV=production
                    - PORT=3001
                    - DB_ENCRYPT=true
                    - DB_TRUST_SERVER_CERTIFICATE=false
                    - JWT_EXPIRES_IN=7d
                    - CORS_ORIGIN=http://4.245.59.253
                  restart: unless-stopped
                  healthcheck:
                    test: [\"CMD-SHELL\", \"curl -fsS http://localhost:3001/health || exit 1\"]
                    interval: 30s
                    timeout: 10s
                    retries: 3
                    start_period: 40s

                frontend:
                  image: ${ACR_LOGIN_SERVER}/ecommerce-frontend:latest
                  container_name: ecommerce-frontend
                  ports:
                    - \"3000:80\"
                  restart: unless-stopped
                  healthcheck:
                    test: [\"CMD-SHELL\", \"curl -fsS http://localhost/health || exit 1\"]
                    interval: 30s
                    timeout: 10s
                    retries: 3
                    start_period: 40s
              COMPOSE

              # ACR login via managed identity
              az login --identity
              TOKEN=\$(az acr login --name \"\$ACR_NAME\" --expose-token --query accessToken -o tsv)
              echo \"\$TOKEN\" | docker login \"\$ACR_LOGIN_SERVER\" -u 00000000-0000-0000-0000-000000000000 --password-stdin

              # Pull & recreate backend only
              if docker compose version >/dev/null 2>&1; then
                docker compose pull backend
                docker compose up -d --no-deps --pull always --force-recreate backend
              else
                docker-compose pull backend
                docker-compose up -d --no-deps --force-recreate backend
              fi

              # Health wait
              for i in \$(seq 1 36); do
                if curl -fsS \"\$BE_HEALTH_URL\" >/dev/null; then
                  echo \"Backend healthy on this VM\"
                  exit 0
                fi
                sleep 5
              done
              echo \"Backend failed healthcheck\"
              docker ps --filter name=ecommerce-backend
              docker logs \$(docker ps --filter name=ecommerce-backend -q) --tail 200 || true
              exit 1
            " >/dev/null
          done

      # ===== FRONTEND: instance-by-instance + health =====
      - name: Update VMSS Frontend (instance-by-instance with health)
        shell: bash
        run: |
          set -euo pipefail

          mapfile -t VM_NAMES < <(az vmss list-instances -g "$RG" -n "$VMSS_FE" --query "[].name" -o tsv)
          [ ${#VM_NAMES[@]} -gt 0 ] || { echo "No instances in $VMSS_FE"; exit 0; }

          for VMNAME in "${VM_NAMES[@]}"; do
            echo ">>> Updating FRONTEND on ${VMNAME} ..."
            az vm run-command invoke -g "$RG" -n "$VMNAME" --command-id RunShellScript --scripts "
              set -euo pipefail
              APP_DIR=\"$APP_DIR\"
              ACR_NAME=\"$ACR_NAME\"
              ACR_LOGIN_SERVER=\"$ACR_LOGIN_SERVER\"
              FE_HEALTH_URL=\"$FE_HEALTH_URL\"

              if ! docker compose version >/dev/null 2>&1; then
                if ! command -v docker-compose >/dev/null 2>&1; then
                  sudo curl -fsSL \"https://github.com/docker/compose/releases/download/2.29.7/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
                  sudo chmod +x /usr/local/bin/docker-compose || true
                fi
              fi

              mkdir -p \"\$APP_DIR\" && cd \"\$APP_DIR\"

              cat > docker-compose.yml <<COMPOSE
              version: \"3.9\"
              services:
                backend:
                  image: ${ACR_LOGIN_SERVER}/ecommerce-backend:latest
                  container_name: ecommerce-backend
                  ports:
                    - \"3001:3001\"
                  env_file:
                    - ./ecommerce-app-backend/.env
                  environment:
                    - NODE_ENV=production
                    - PORT=3001
                    - DB_ENCRYPT=true
                    - DB_TRUST_SERVER_CERTIFICATE=false
                    - JWT_EXPIRES_IN=7d
                    - CORS_ORIGIN=http://4.245.59.253
                  restart: unless-stopped
                  healthcheck:
                    test: [\"CMD-SHELL\", \"curl -fsS http://localhost:3001/health || exit 1\"]
                    interval: 30s
                    timeout: 10s
                    retries: 3
                    start_period: 40s

                frontend:
                  image: ${ACR_LOGIN_SERVER}/ecommerce-frontend:latest
                  container_name: ecommerce-frontend
                  ports:
                    - \"3000:80\"
                  restart: unless-stopped
                  healthcheck:
                    test: [\"CMD-SHELL\", \"curl -fsS http://localhost/health || exit 1\"]
                    interval: 30s
                    timeout: 10s
                    retries: 3
                    start_period: 40s
              COMPOSE

              az login --identity
              TOKEN=\$(az acr login --name \"\$ACR_NAME\" --expose-token --query accessToken -o tsv)
              echo \"\$TOKEN\" | docker login \"\$ACR_LOGIN_SERVER\" -u 00000000-0000-0000-0000-000000000000 --password-stdin

              if docker compose version >/dev/null 2>&1; then
                docker compose pull frontend
                docker compose up -d --no-deps --pull always --force-recreate frontend
              else
                docker-compose pull frontend
                docker-compose up -d --no-deps --force-recreate frontend
              fi

              for i in \$(seq 1 36); do
                if curl -fsS \"\$FE_HEALTH_URL\" >/dev/null; then
                  (curl -fsS http://127.0.0.1:3000/version.txt || true)
                  echo \"Frontend healthy on this VM\"
                  exit 0
                fi
                sleep 5
              done
              echo \"Frontend failed healthcheck\"
              docker ps --filter name=ecommerce-frontend
              docker logs \$(docker ps --filter name=ecommerce-frontend -q) --tail 200 || true
              exit 1
            " >/dev/null
          done

      
