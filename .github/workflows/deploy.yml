name: Build and Deploy to ACR

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  ACR_NAME: group4acr
  ACR_LOGIN_SERVER: group4acr.azurecr.io
  RG: RG-group4
  VMSS_BE: vmss-backend-group4
  VMSS_FE: vmss-frontend-group4
  APP_DIR: /home/azureuser/ecommerce-app-three-tier-azure-db-ih

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR Login
        run: az acr login --name "$ACR_NAME" --only-show-errors

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build & push Backend
      - name: Build and Push Backend
        run: |
          set -euo pipefail
          TAG=${{ github.sha }}
          docker build \
            -t $ACR_LOGIN_SERVER/ecommerce-backend:${TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-backend:latest \
            ./ecommerce-app-backend
          docker push $ACR_LOGIN_SERVER/ecommerce-backend:${TAG}
          docker push $ACR_LOGIN_SERVER/ecommerce-backend:latest

      # Build & push Frontend (يمرر COMMIT_SHA اختياري)
      - name: Build and Push Frontend
        run: |
          set -euo pipefail
          TAG=${{ github.sha }}
          docker build \
            --build-arg COMMIT_SHA=${TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-frontend:${TAG} \
            -t $ACR_LOGIN_SERVER/ecommerce-frontend:latest \
            ./ecommerce-app-frontend
          docker push $ACR_LOGIN_SERVER/ecommerce-frontend:${TAG}
          docker push $ACR_LOGIN_SERVER/ecommerce-frontend:latest

      # ====== Backend VMSS: اكتشف النمط (Flexible/Uniform) وحدث كل إنستانس ======
      - name: Update VMSS Backend (detect mode & loop)
        shell: bash
        run: |
          set -euo pipefail
          MODE=$(az vmss show -g "$RG" -n "$VMSS_BE" --query "orchestrationMode" -o tsv)
          echo "Backend VMSS mode: $MODE"

          # سكربت التنفيذ على الماشين الهدف
          REMOTE_SCRIPT=$'set -e\ncd '"$APP_DIR"$'\naz login --identity\nTOKEN=$(az acr login --name '"$ACR_NAME"$' --expose-token --query accessToken -o tsv)\necho $TOKEN | docker login '"$ACR_LOGIN_SERVER"$' -u 00000000-0000-0000-0000-000000000000 --password-stdin\ndocker compose pull backend\ndocker compose up -d --no-deps --pull always --force-recreate backend\ndocker ps --filter name=ecommerce-backend --format "container={{.ID}} image={{.Image}}"\ndocker image ls '"$ACR_LOGIN_SERVER"$'/ecommerce-backend --digests || true\ndocker image prune -f || true'

          if [ "$MODE" = "Flexible" ]; then
            # اجلب VM IDs العادية المرتبطة بهذا الـVMSS
            VM_IDS=$(az vm list -g "$RG" \
              --query "[?virtualMachineScaleSet && ends_with(virtualMachineScaleSet.id, '/virtualMachineScaleSets/${VMSS_BE}')].id" \
              -o tsv)
            if [ -z "${VM_IDS}" ]; then
              echo "No VMs found for $VMSS_BE (Flexible)."; exit 1
            fi
            for VMID in $VM_IDS; do
              echo "Updating backend on VM ID: $VMID"
              az vm run-command invoke --ids "$VMID" --command-id RunShellScript --scripts "$REMOTE_SCRIPT" >/dev/null
            done
          else
            # Uniform: استخدم instanceId رقمي + vmss run-command
            IDS=$(az vmss list-instances -g "$RG" -n "$VMSS_BE" --query "[].instanceId" -o tsv)
            if [ -z "${IDS}" ]; then
              echo "No instances found for $VMSS_BE (Uniform)."; exit 1
            fi
            for ID in $IDS; do
              echo "Updating backend on instanceId: $ID"
              az vmss run-command invoke -g "$RG" -n "$VMSS_BE" \
                --instance-id "$ID" \
                --command-id RunShellScript \
                --scripts "$REMOTE_SCRIPT" >/dev/null
            done
          fi

      # ====== Frontend VMSS: نفس الفكرة ======
      - name: Update VMSS Frontend (detect mode & loop)
        shell: bash
        run: |
          set -euo pipefail
          MODE=$(az vmss show -g "$RG" -n "$VMSS_FE" --query "orchestrationMode" -o tsv)
          echo "Frontend VMSS mode: $MODE"

          REMOTE_SCRIPT=$'set -e\ncd '"$APP_DIR"$'\naz login --identity\nTOKEN=$(az acr login --name '"$ACR_NAME"$' --expose-token --query accessToken -o tsv)\necho $TOKEN | docker login '"$ACR_LOGIN_SERVER"$' -u 00000000-0000-0000-0000-000000000000 --password-stdin\ndocker compose pull frontend\ndocker compose up -d --no-deps --pull always --force-recreate frontend\ndocker ps --filter name=ecommerce-frontend --format "container={{.ID}} image={{.Image}}"\ndocker image ls '"$ACR_LOGIN_SERVER"$'/ecommerce-frontend --digests || true\n(curl -sS http://localhost/version.txt || true)\ndocker image prune -f || true'

          if [ "$MODE" = "Flexible" ]; then
            VM_IDS=$(az vm list -g "$RG" \
              --query "[?virtualMachineScaleSet && ends_with(virtualMachineScaleSet.id, '/virtualMachineScaleSets/${VMSS_FE}')].id" \
              -o tsv)
            if [ -z "${VM_IDS}" ]; then
              echo "No VMs found for $VMSS_FE (Flexible)."; exit 1
            fi
            for VMID in $VM_IDS; do
              echo "Updating frontend on VM ID: $VMID"
              az vm run-command invoke --ids "$VMID" --command-id RunShellScript --scripts "$REMOTE_SCRIPT" >/dev/null
            done
          else
            IDS=$(az vmss list-instances -g "$RG" -n "$VMSS_FE" --query "[].instanceId" -o tsv)
            if [ -z "${IDS}" ]; then
              echo "No instances found for $VMSS_FE (Uniform)."; exit 1
            fi
            for ID in $IDS; do
              echo "Updating frontend on instanceId: $ID"
              az vmss run-command invoke -g "$RG" -n "$VMSS_FE" \
                --instance-id "$ID" \
                --command-id RunShellScript \
                --scripts "$REMOTE_SCRIPT" >/dev/null
            done
          fi
