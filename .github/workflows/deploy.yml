name: Build & Deploy (ACR + VMSS rolling/health)

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  ACR_NAME: group4acr
  ACR_LOGIN_SERVER: group4acr.azurecr.io
  RG: RG-group4
  VMSS_BE: vmss-backend-group4
  VMSS_FE: vmss-frontend-group4
  APP_DIR: /home/azureuser/ecommerce-app-three-tier-azure-db-ih
  COMPOSE_PATH_IN_REPO: docker-compose.yml
  BE_HEALTH_URL: http://127.0.0.1:3001/health
  FE_HEALTH_URL: http://127.0.0.1:3000/health

jobs:
  build:
    name: Build & Push images to ACR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker login to ACR
        run: az acr login --name "$ACR_NAME" --only-show-errors

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push BACKEND (tags: SHA + latest)
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ github.sha }}"
          docker build \
            -t "$ACR_LOGIN_SERVER/ecommerce-backend:${TAG}" \
            -t "$ACR_LOGIN_SERVER/ecommerce-backend:latest" \
            ./ecommerce-app-backend
          docker push "$ACR_LOGIN_SERVER/ecommerce-backend:${TAG}"
          docker push "$ACR_LOGIN_SERVER/ecommerce-backend:latest"

      - name: Build & Push FRONTEND (tags: SHA + latest)
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ github.sha }}"
          docker build \
            --build-arg COMMIT_SHA="${TAG}" \
            -t "$ACR_LOGIN_SERVER/ecommerce-frontend:${TAG}" \
            -t "$ACR_LOGIN_SERVER/ecommerce-frontend:latest" \
            ./ecommerce-app-frontend
          docker push "$ACR_LOGIN_SERVER/ecommerce-frontend:${TAG}"
          docker push "$ACR_LOGIN_SERVER/ecommerce-frontend:latest"

  deploy:
    name: Deploy to VMSS (instance-by-instance + health)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Azure CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare RAW URL for docker-compose.yml
        id: compose
        shell: bash
        run: |
          set -euo pipefail
          RAW_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/${COMPOSE_PATH_IN_REPO}"
          echo "RAW_URL=$RAW_URL" | tee -a "$GITHUB_OUTPUT"
          echo "Using RAW compose from: $RAW_URL"

      - name: Update Backend VMSS (rolling + health + force-sync)
        shell: bash
        env:
          RAW_URL: ${{ steps.compose.outputs.RAW_URL }}
          TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          mapfile -t NAMES < <(az vmss list-instances -g "$RG" -n "$VMSS_BE" --query "[].name" -o tsv)
          [ ${#NAMES[@]} -gt 0 ] || { echo "No instances in $VMSS_BE"; exit 0; }
          for VM in "${NAMES[@]}"; do
            az vm run-command invoke -g "$RG" -n "$VM" --command-id RunShellScript --scripts "
set -euo pipefail
RAW_URL='${RAW_URL}'
ACR_NAME='${ACR_NAME}'
ACR_LOGIN_SERVER='${ACR_LOGIN_SERVER}'
APP_DIR='${APP_DIR}'
BE_HEALTH_URL='${BE_HEALTH_URL}'
TAG='${TAG}'
if ! command -v docker >/dev/null; then echo 'Docker not installed'; exit 1; fi
if ! docker compose version >/dev/null 2>&1; then
  if ! command -v docker-compose >/dev/null 2>&1; then
    sudo curl -L 'https://github.com/docker/compose/releases/download/2.29.7/docker-compose-$(uname -s)-$(uname -m)' -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose || true
  fi
fi
if ! command -v az >/dev/null 2>&1; then curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash; fi
mkdir -p \"$APP_DIR\" && cd \"$APP_DIR\"
curl -fsSL \"$RAW_URL\" -o docker-compose.yml
printf '%s\n' \"ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER\" \"IMAGE_TAG=$TAG\" > .env
az login --identity
TOKEN=\$(az acr login -n \"$ACR_NAME\" --expose-token --query accessToken -o tsv)
echo \"\$TOKEN\" | docker login \"$ACR_LOGIN_SERVER\" -u 00000000-0000-0000-0000-000000000000 --password-stdin
docker rm -f ecommerce-backend 2>/dev/null || true
if docker compose version >/dev/null 2>&1; then
  docker compose --env-file .env pull backend
  docker compose --env-file .env up -d --no-deps --force-recreate backend
else
  docker-compose --env-file .env pull backend
  docker-compose --env-file .env up -d --no-deps --force-recreate backend
fi
TRY=0; MAX=24
until curl -fsS \"$BE_HEALTH_URL\" >/dev/null; do
  TRY=\$((TRY+1)); [ \$TRY -lt \$MAX ] || { docker ps --filter name=ecommerce-backend; docker logs \$(docker ps --filter name=ecommerce-backend -q) --tail 200 || true; exit 1; }
  sleep 5
done
echo 'Backend healthy'
" >/dev/null
          done

      - name: Update Frontend VMSS (rolling + health + force-sync)
        shell: bash
        env:
          RAW_URL: ${{ steps.compose.outputs.RAW_URL }}
          TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          mapfile -t NAMES < <(az vmss list-instances -g "$RG" -n "$VMSS_FE" --query "[].name" -o tsv)
          [ ${#NAMES[@]} -gt 0 ] || { echo "No instances in $VMSS_FE"; exit 0; }
          for VM in "${NAMES[@]}"; do
            az vm run-command invoke -g "$RG" -n "$VM" --command-id RunShellScript --scripts "
set -euo pipefail
RAW_URL='${RAW_URL}'
ACR_NAME='${ACR_NAME}'
ACR_LOGIN_SERVER='${ACR_LOGIN_SERVER}'
APP_DIR='${APP_DIR}'
FE_HEALTH_URL='${FE_HEALTH_URL}'
TAG='${TAG}'
if ! command -v docker >/dev/null; then echo 'Docker not installed'; exit 1; fi
if ! docker compose version >/dev/null 2>&1; then
  if ! command -v docker-compose >/dev/null 2>&1; then
    sudo curl -L 'https://github.com/docker/compose/releases/download/2.29.7/docker-compose-$(uname -s)-$(uname -m)' -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose || true
  fi
fi
if ! command -v az >/dev/null 2>&1; then curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash; fi
mkdir -p \"$APP_DIR\" && cd \"$APP_DIR\"
curl -fsSL \"$RAW_URL\" -o docker-compose.yml
printf '%s\n' \"ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER\" \"IMAGE_TAG=$TAG\" > .env
az login --identity
TOKEN=\$(az acr login -n \"$ACR_NAME\" --expose-token --query accessToken -o tsv)
echo \"\$TOKEN\" | docker login \"$ACR_LOGIN_SERVER\" -u 00000000-0000-0000-0000-000000000000 --password-stdin
docker rm -f ecommerce-frontend 2>/dev/null || true
if docker compose version >/dev/null 2>&1; then
  docker compose --env-file .env pull frontend
  docker compose --env-file .env up -d --no-deps --force-recreate frontend
else
  docker-compose --env-file .env pull frontend
  docker-compose --env-file .env up -d --no-deps --force-recreate frontend
fi
TRY=0; MAX=24
until curl -fsS \"$FE_HEALTH_URL\" >/dev/null; do
  TRY=\$((TRY+1)); [ \$TRY -lt \$MAX ] || { docker ps --filter name=ecommerce-frontend; docker logs \$(docker ps --filter name=ecommerce-frontend -q) --tail 200 || true; exit 1; }
  sleep 5
done
echo -n 'version: '; cat /usr/share/nginx/html/version.txt || true
echo '--- css files ---'; ls -l /usr/share/nginx/html/static/css || true
echo '--- index references ---'; grep -o \"/static/css/[^\" ]*\\.css\" -n /usr/share/nginx/html/index.html || true
" >/dev/null
          done

          #55555
