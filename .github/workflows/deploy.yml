name: Build & Deploy (ACR + VMSS rolling with RAW compose)

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  ACR_NAME: group4acr
  ACR_LOGIN_SERVER: group4acr.azurecr.io
  RG: RG-group4
  VMSS_BE: vmss-backend-group4
  VMSS_FE: vmss-frontend-group4
  APP_DIR: /home/azureuser/ecommerce-app-three-tier-azure-db-ih
  COMPOSE_PATH_IN_REPO: docker-compose.yml
  SCRIPT_PATH_IN_REPO: infra/scripts/vmss-deploy.sh
  BE_HEALTH_URL: http://127.0.0.1:3001/health
  FE_HEALTH_URL: http://127.0.0.1:3000/health

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      RAW_COMPOSE_URL: ${{ steps.out.outputs.RAW_COMPOSE_URL }}
      SCRIPT_URL: ${{ steps.out.outputs.SCRIPT_URL }}
      TAG: ${{ steps.tag.outputs.TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        run: az acr login --name "$ACR_NAME" --only-show-errors

      - uses: docker/setup-buildx-action@v3

      - name: Set TAG
        id: tag
        run: echo "TAG=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Build & Push BACKEND
        run: |
          set -euo pipefail
          TAG="${{ steps.tag.outputs.TAG }}"
          docker build -t "$ACR_LOGIN_SERVER/ecommerce-backend:${TAG}" \
                       -t "$ACR_LOGIN_SERVER/ecommerce-backend:latest" ./ecommerce-app-backend
          docker push "$ACR_LOGIN_SERVER/ecommerce-backend:${TAG}"
          docker push "$ACR_LOGIN_SERVER/ecommerce-backend:latest"

      - name: Build & Push FRONTEND
        run: |
          set -euo pipefail
          TAG="${{ steps.tag.outputs.TAG }}"
          docker build --build-arg COMMIT_SHA="${TAG}" \
                       -t "$ACR_LOGIN_SERVER/ecommerce-frontend:${TAG}" \
                       -t "$ACR_LOGIN_SERVER/ecommerce-frontend:latest" ./ecommerce-app-frontend
          docker push "$ACR_LOGIN_SERVER/ecommerce-frontend:${TAG}"
          docker push "$ACR_LOGIN_SERVER/ecommerce-frontend:latest"

      - name: Export RAW URLs
        id: out
        run: |
          set -euo pipefail
          echo "RAW_COMPOSE_URL=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/${COMPOSE_PATH_IN_REPO}" >> "$GITHUB_OUTPUT"
          echo "SCRIPT_URL=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/${SCRIPT_PATH_IN_REPO}" >> "$GITHUB_OUTPUT"

  deploy-backend:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Rolling update BACKEND
        env:
          RAW: ${{ needs.build.outputs.RAW_COMPOSE_URL }}
          SCR: ${{ needs.build.outputs.SCRIPT_URL }}
          TAG: ${{ needs.build.outputs.TAG }}
        run: |
          set -euo pipefail
          mapfile -t NAMES < <(az vmss list-instances -g "$RG" -n "$VMSS_BE" --query "[].name" -o tsv)
          [ ${#NAMES[@]} -gt 0 ] || { echo "No instances in $VMSS_BE"; exit 0; }
          for VM in "${NAMES[@]}"; do
            echo ">>> BACKEND on $VM"
            az vm run-command invoke -g "$RG" -n "$VM" --command-id RunShellScript --scripts \
              "curl -fsSL '${SCR}' | bash -s -- \
                --app-dir '${APP_DIR}' \
                --acr-name '${ACR_NAME}' \
                --acr-login '${ACR_LOGIN_SERVER}' \
                --raw-compose-url '${RAW}' \
                --image-tag '${TAG}' \
                --health-url '${BE_HEALTH_URL}' \
                --service backend" >/dev/null
          done

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Rolling update FRONTEND
        env:
          RAW: ${{ needs.build.outputs.RAW_COMPOSE_URL }}
          SCR: ${{ needs.build.outputs.SCRIPT_URL }}
          TAG: ${{ needs.build.outputs.TAG }}
        run: |
          set -euo pipefail
          mapfile -t NAMES < <(az vmss list-instances -g "$RG" -n "$VMSS_FE" --query "[].name" -o tsv)
          [ ${#NAMES[@]} -gt 0 ] || { echo "No instances in $VMSS_FE"; exit 0; }
          for VM in "${NAMES[@]}"; do
            echo ">>> FRONTEND on $VM"
            az vm run-command invoke -g "$RG" -n "$VM" --command-id RunShellScript --scripts \
              "curl -fsSL '${SCR}' | bash -s -- \
                --app-dir '${APP_DIR}' \
                --acr-name '${ACR_NAME}' \
                --acr-login '${ACR_LOGIN_SERVER}' \
                --raw-compose-url '${RAW}' \
                --image-tag '${TAG}' \
                --health-url '${FE_HEALTH_URL}' \
                --service frontend" >/dev/null
          done
